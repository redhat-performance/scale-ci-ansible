---
# Remove all old directories and files.
- name: Removing any old directories or files from previous attempts
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "openshift-ansible"
    - "inventory"
    - "ansible.cfg"
    - ".kube"

# Set a variable for the ansible-playbook.
- name: Setting the ansible-playbook variable
  set_fact:
    ansible_playbook: "source {{ openstack_rc }}; ansible-playbook"

# The openstack variable includes the rc file and the path to the OpenStack client.
- name: Setting the openstack variable to source the rc file and contain path to client
  set_fact:
    openstack: "source {{ openstack_rc }}; {{ openstack_location }}"

# Check if the server contains the openshift-ansible code already.
- name: Checking file system status for the openshift-ansible directory
  stat:
    get_checksum: no
    get_md5: no
    path: "/root/openshift-ansible"
  become: true
  register: openshift_ansible

# Copy the openshift-ansible files to the user's home directory.
- name: "Copying the openshift-ansible files to {{ ansible_user_dir }}/openshift-ansible"
  # Note: The copy module does not support recursive copy of remote sources.
  command: "cp -a /root/openshift-ansible/ {{ ansible_user_dir }}/openshift-ansible"
  become: true
  when: (not openshift_ansible_clone | bool) and openshift_ansible['stat']['exists']

# Change the permissions to be owned by the user.
- name: Changing the permission of the openshift-ansible files
  file:
    path: "{{ ansible_user_dir }}/openshift-ansible"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    recurse: yes
  become: true
  when: (not openshift_ansible_clone | bool) and openshift_ansible['stat']['exists']

# Print the values that will be used for the openshift-ansible repository.
- name: Printing the values used to clone openshift-ansible
  debug:
    msg: "openshift-ansible repository: {{ openshift_ansible_repo }} {{ openshift_ansible_version }}"
  when: openshift_ansible_clone | bool

# Get a fresh clone of the openshift-ansible GitHub project.
- name: Cloning the openshift-ansible repository
  git:
    dest: "{{ ansible_user_dir }}/openshift-ansible"
    # Specify the repo as a variable to test other people's repositories.
    repo: "{{ openshift_ansible_repo }}"
    # Specify a version for a different branch, tag, or hash to verify PRs.
    version: "{{ openshift_ansible_version }}"
  when: openshift_ansible_clone | bool

# Include the tasks from the openshift_ansible_patch role.
- name: Include the tasks to patch files in the openshift-ansible directory
  include_role:
    name: openshift_ansible_patch

# Set the openshift-ansible openstack path.
- name: Creating the openshift_openstack directory variable
  set_fact:
    openshift_openstack_dir: "openshift-ansible/playbooks/openstack"

# Set the path to the OpenShift inventory file.
- name: Creating a variable to the inventory file
  set_fact:
    inventory_py: "{{ openshift_openstack_dir }}/inventory.py"

# Copy the remote sample-inventory to another remote directory.
- name: Copying the sample inventory directory
  # Note: The copy module does not support recurisve copy of remote sources.
  command: cp -a {{ openshift_openstack_dir }}/sample-inventory/ inventory

# Copy the Ansible configuration file from the openshift-ansible repository.
- name: Copying the Ansible configuration file from openshift-ansible
  copy:
    remote_src: true
    src: "openshift-ansible/ansible.cfg"
    dest: /etc/ansible/ansible.cfg
  become: true

# Edit the ansible.cfg file to turn on some features.
- name: Changing the Ansible configuration for this host
  lineinfile:
    dest: /etc/ansible/ansible.cfg
    regexp: "{{ item['find'] }}"
    line: "{{ item['replace'] }}"
  with_items:
    - { find: "^#?log_path =.*", replace: "log_path = /var/tmp/ansible.log" }
    # ControlMaster enables the sharing of multiple sessions over a single network connection.
    # ControlPersist the master connection should remain open in the background (waiting for future client connections) after the initial client connection has been closed.
    # ServerAliveInterval a timeout interval in seconds after which if no data has been received from the server, the ssh client will send an alive message.
    # ServerAliveCountMax the number of server alive messages which may be sent without the ssh client receiving any messages back from the server.
    - { find: "^#?ssh_args =.*", replace: "ssh_args = -o ControlMaster=auto -o ControlPersist=600s -o ServerAliveInterval=20 -o ServerAliveCountMax=3" }
  become: true

# Check if the nsupdate_file exists.
- name: Checking file system status for the nsupdate file
  stat:
    get_checksum: no
    get_md5: no
    path: "{{ nsupdate_file }}"
  register: nsupdate

- name: Reading the contents of the nsupdate file
  shell: "cat {{ nsupdate_file }}"
  register: nsupdate_contents
  when: nsupdate['stat']['exists']
  changed_when: false

# Add a block of configuration to the end of the all.yml file.
- name: Adding DNS configuration to the end of {{ all_yml_path }}
  blockinfile:
    backup: yes
    block: "{{ nsupdate_contents['stdout'] }}"
    insertafter: EOF
    path: "{{ all_yml_path }}"
  when: nsupdate['stat']['exists']

- name: Create the all.yml.cfg (all.yml override) file.
  template:
    dest: "{{ all_yml_cfg_path }}"
    src: all.yml.cfg.j2

- name: Reading the contents of {{ all_yml_path }}
  command: "cat {{ all_yml_path }}"
  register: l_all_yml
  changed_when: false

- name: Reading the contents of {{ all_yml_cfg_path }}
  command: "cat {{ all_yml_cfg_path }}"
  register: l_all_yml_cfg
  changed_when: false

- name: Setting facts from {{ all_yml_path }} and {{ all_yml_cfg_path }}
  set_fact:
    all_yml: "{{ l_all_yml.stdout | from_yaml }}"
    all_yml_override: "{{ l_all_yml_cfg.stdout | from_yaml }}"

- name: Override the settings in {{ all_yml_path }}
  set_fact:
    all_yml: "{{ all_yml|combine(all_yml_override, recursive=False) }}"

- name: Write the updated {{ all_yml_path }}
  copy:
    content: "{{ all_yml | to_nice_yaml(width=80, indent=2) }}"
    dest: "{{ all_yml_path }}"
    backup: yes

- name: Create the OSEv3.yml.cfg (OSEv3.yml override) file.
  template:
    dest: "{{ osev3_yml_cfg_path }}"
    src: OSEv3.yml.cfg.j2

- name: Reading the contents of {{ osev3_yml_path }}
  command: "cat {{ osev3_yml_path }}"
  register: l_osev3_yml
  changed_when: false

- name: Reading the contents of {{ osev3_yml_cfg_path }}
  command: "cat {{ osev3_yml_cfg_path }}"
  register: l_osev3_yml_cfg
  changed_when: false

- name: Setting facts from {{ osev3_yml_path }} and {{ osev3_yml_cfg_path }}
  set_fact:
    osev3_yml: "{{ l_osev3_yml.stdout | from_yaml }}"
    osev3_yml_override: "{{ l_osev3_yml_cfg.stdout | from_yaml }}"

- name: Override the settings in {{ osev3_yml_path }}
  set_fact:
    osev3_yml: "{{ osev3_yml|combine(osev3_yml_override, recursive=False) }}"

- name: Write the updated {{ osev3_yml_path }}
  copy:
    content: "{{ osev3_yml | to_nice_yaml(width=80, indent=2) }}"
    dest: "{{ osev3_yml_path }}"
    backup: yes


# Get some debug information that makes it easier to file bugs.
- name: Running commands that create debug information needed to open issues
  shell: "{{ item }}"
  register: debug_information
  with_items:
    - "printf \"$(uname -srm)\n$(cat /etc/os-release)\n\""
    - "ansible --version"
    - "cd openshift-ansible ; git describe"
    - "rpm -q atomic-openshift-utils openshift-ansible"
  changed_when: false
  ignore_errors: true

# Print the debug information out.
- name: Printing the debug information to the screen
  debug:
    msg: "{{ item['stdout_lines'] }}"
  with_items: "{{ debug_information['results'] }}"

# Set the path for the prerequisite log file.
- name: Creating a variable for the prerequisite log file
  set_fact:
    prerequisite_log: "{{ ansible_user_dir }}/openshift_prerequisites.log"

# Run the Ansible playbook that checks the prerequisites in OpenStack.
- name: Checking the prerequisites for cluster provisioning in OpenStack
  # Using two inventory flags here as the README instructs.
  shell: "{{ ansible_playbook }} -vvv --user openshift -i inventory -i {{ inventory_py }} {{ openshift_openstack_dir }}/openshift-cluster/prerequisites.yml 2>&1 >> {{ prerequisite_log }}"
  args:
    # Use bash to get the posix style redirects.
    executable: /bin/bash

# Set the path for the OpenStack provision log file.
- name: Creating a variable for the OpenStack provision log file
  set_fact:
    openstack_provision_log: "{{ ansible_user_dir }}/openstack_provision.log"

# Run the Ansible playbook that provisions the OpenStack resources.
- name: Creating the OpenStack resources
  # Using two inventory flags here as the README instructs.
  shell: "{{ ansible_playbook }} -vvv --user openshift -i inventory -i {{ inventory_py }} {{ openshift_openstack_dir }}/openshift-cluster/provision.yml 2>&1 >> {{ openstack_provision_log }}"
  args:
    # Use bash to get the posix style redirects.
    executable: /bin/bash

# Render the time server configuration file and copy it to the target-host.
- name: Rendering the time server configuration file to the target-host
  template:
    src: chrony.conf.j2
    dest: "{{ ansible_user_dir }}/chrony.conf"

# Copy the configure_time_servers.yml playbook to the target-host.
- name: Copying the configure_time_servers.yml playbook to the target-host
  copy:
    src: templates/configure_time_servers.yml
    dest: "{{ ansible_user_dir }}/configure_time_servers.yml"

# Set the path for the time servers log file.
- name: Creating a variable for the time servers log file
  set_fact:
    time_servers_log: "{{ ansible_user_dir }}/time_servers.log"

# Configure the time servers on all the provisioned nodes.
- name: Configuring the time servers on all the provisioned nodes
  shell: "{{ ansible_playbook }} -vv --user openshift -i {{ inventory_py }} configure_time_servers.yml 2>&1 >> {{ time_servers_log }}"
  args:
    # Use bash to get the posix style redirects.
    executable: /bin/bash

# Copy the prepare_block_devices.yml playbook to the target-host.
- name: Copying the prepare_block_devices.yml playbook to the target-host
  copy:
    src: templates/prepare_block_devices.yml
    dest: "{{ ansible_user_dir }}/prepare_block_devices.yml"

# Set the path for the block devices log file.
- name: Creating a variable for the the block devices log file
  set_fact:
    block_devices_log: "{{ ansible_user_dir }}/block_devices.log"

# Configure the block devices on the master nodes.
- name: Configuring the block devices on the master nodes
  shell: "{{ ansible_playbook }} -vv --user openshift -i {{ inventory_py }} prepare_block_devices.yml 2>&1 >> {{ block_devices_log }}"
  args:
    # Use bash to get the posix style redirects.
    executable: /bin/bash

# Set the path for the OpenShift install log file.
- name: Creating the OpenShift install log file variable
  set_fact:
    openshift_install_log: "{{ ansible_user_dir }}/openshift_install.log"

# Register pbench default tool-set
- name: Register pbench toolset
  shell: pbench-register-tool-set

# Run the Ansible playbook that installs OpenShift.
- name: Installing OpenShift on OpenStack
  # Using two inventory flags here as the README instructs.
  shell: pbench-user-benchmark --pbench-post='/usr/local/bin/pbscraper -i $benchmark_results_dir/tools-default -o $benchmark_results_dir; ansible-playbook -vv -i {{ pbcompare_inventory }} {{ pbcompare_playbook }} -e new_file='$benchmark_results_dir/out.json'' -- {{ ansible_playbook }} -vvv --user openshift -i inventory -i {{ inventory_py }} {{ openshift_openstack_dir }}/openshift-cluster/install.yml 2>&1 >> {{ openshift_install_log }}
  args:
    # Use bash to get the posix style redirects.
    executable: /bin/bash

# Please do not add any more lines after the task above -- use another role.
# This will allow a more pleasant completion of deployment after OpenShift
# deployments failed because of a non-critical issue.
