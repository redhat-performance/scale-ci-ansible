---
# Delete any existing known hosts file so there are no mismatch errors.
- name: Deleting the known hosts from {{ inventory_hostname }}
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ ansible_user_dir }}/.ssh/known_hosts"

# Ensure the remote install directory exists.
- name: Creating the {{ install_directory }} directory on {{ inventory_hostname }}
  become: true
  file:
    path: "{{ install_directory }}"
    state: directory
    mode: 0700
    owner: stack
    group: stack

# Copy the public key so it can be used to create the OpenStack keypair.
- name: Copying the public key to {{ inventory_hostname }}
  copy:
    backup: yes
    src: "{{ ansible_public_key_file }}"
    dest: "{{ ansible_user_dir }}/.ssh/id_rsa.pub"

# Copy the private key so it can be used to access OpenStack VMs.
- name: Copying the private key to {{ inventory_hostname }}
  copy:
    backup: yes
    src: "{{ ansible_private_key_file }}"
    dest: "{{ ansible_user_dir }}/.ssh/id_rsa"
    mode: 0600

# Copy the OpenStack rc file from the OpenStack server.
- name: Fetching the OpenStack rc file from {{ inventory_hostname }}
  fetch:
    src: "{{ openstack_rc }}"
    flat: yes
    dest: "{{ playbook_dir }}/openstackrc"

# Check for the existence of the OpenStack client.
- name: Checking for the OpenStack client
  stat:
    path: "{{ openstack_location }}"
  register: openstack_path

# Fail when the openstack client path does not exist.
- name: Aborting when the OpenStack client does not exist
  fail:
    msg: "The openstack client path '{{ openstack_location }}' is invalid."
  when: openstack_path.stat.exists == false

# The openstack variable includes the rc file and the path to the OpenStack client.
- name: Setting openstack variable to source the rc file and contain path to client
  set_fact:
    openstack: "source {{ openstack_rc }}; {{ openstack_location }}"

# Create a router so the private network can connect to the Internet.
- name: Creating the {{ openstack_router_name }} router
  shell: "{{ openstack }} router create {{ openstack_router_name }} --format value -c id"
  register: router_uuid

# Create a private network for the OpenStack servers to use.
- name: Creating the {{ openstack_network_name }} network
  shell: "{{ openstack }} network create {{ openstack_network_name }} --format value -c id"
  register: ci_network_uuid

# Run a command to retrieve the public DNS nameservers already set up.
- name: Getting the dns_nameservers addresses from the {{ openstack_public_subnet_name }}
  shell: "{{ openstack }} subnet show {{ openstack_public_subnet_name }} --format value -c dns_nameservers"
  register: dns_nameservers
  changed_when: false

# Create a subnet with a CIDR range and link it to the private network.
- name: Creating the {{ openstack_subnet_name }} subnet
  shell: "{{ openstack }} subnet create --network {{ ci_network_uuid['stdout'] }} --subnet-range {{ openstack_subnet_range }} {{ openstack_subnet_name }} --format value -c id"
  register: subnet_uuid

# Set each DNS server on the subnet of the private network.
- name: Setting the DNS nameservers on {{ openstack_subnet_name }}
  shell: "{{ openstack }} subnet set --dns-nameserver {{ item }} {{ subnet_uuid['stdout'] }}"
  with_items: "{{ dns_nameservers['stdout'].split(',') }}"

# The subnet is configured, add it to the router.
- name: Adding {{ openstack_subnet_name }} subnet to the {{ openstack_router_name }} router
  shell: "{{ openstack }} router add subnet {{ openstack_router_name }} {{ subnet_uuid['stdout'] }}"

# Run a command to retrieve the public network uuid.
- name: Getting the public network id
  shell: "{{ openstack }} network show {{ openstack_public_network_name }} --format value -c id"
  register: public_network_uuid
  changed_when: false

# Set the gateway on the new router to use the public network.
- name: Assigning the public network as the gateway for the new router
  #shell: virtualenv/bin/neutron router-gateway-set {{ router_uuid['stdout'] }} {{ public_network_uuid['stdout'] }}
  shell: "{{ openstack }} router set {{ router_uuid['stdout'] }} --external-gateway {{ public_network_uuid['stdout'] }}"

# Create a security group to hold all rules set in this script.
- name: Creating {{ openstack_security_group_name }} security group for this server
  shell: "{{ openstack }} security group create {{ openstack_security_group_name }} --format value -c id"
  register: security_group_uuid

# Create the security group rule that allows ping (ICMP traffic).
- name: Creating the security group rule that allows ping
  shell: "{{ openstack }} security group rule create --ingress --protocol icmp {{ security_group_uuid['stdout'] }} --format value -c id"

# Create the security group rule that allows ssh (TCP port 22).
- name: Creating the security group rule that allows ssh
  shell: "{{ openstack }} security group rule create --ingress --protocol tcp --dst-port 22 {{ security_group_uuid['stdout'] }} --format value -c id"

# Create the security group rule that allows HTTP (TCP port 80-81).
- name: Creating the security group rule for http
  shell: "{{ openstack }} security group rule create --ingress --protocol tcp --dst-port 80:81 {{ security_group_uuid['stdout'] }} --format value -c id"

# Create the security group rule that allows secure HTTP (TCP port 443).
- name: Creating the security group rule for secure http
  shell: "{{ openstack }} security group rule create --ingress --protocol tcp --dst-port 443 {{ security_group_uuid['stdout'] }} --format value -c id"

# Create the security group rule that allows connections to cluster loader synchronization endpoint (TCP port 9090).
- name: Creating the security group rule for cluster loader synchronization endpoint
  shell: "{{ openstack }} security group rule create --ingress --protocol tcp --dst-port 9090 {{ security_group_uuid['stdout'] }} --format value -c id"

# Create the floating ip address on the public network.
- name: Creating a floating ip on the {{ openstack_public_network_name }}
  shell: "{{ openstack }} floating ip create {{ openstack_public_network_name }} --format value -c floating_ip_address"
  register: address

# Set the floating ip address as fact.
- name: Setting the floating ip address variable
  set_fact:
    floating_ip_address: "{{ address['stdout'] }}"

# Add a keypair to OpenStack that allows access to the server.
- name: Creating {{ openstack_keypair_name }} keypair to access this server
  shell: "{{ openstack }} keypair create --public-key {{ ansible_user_dir }}/.ssh/id_rsa.pub {{ openstack_keypair_name }} --format value -c fingerprint"

# Create EC2 flavors so create server can specify a standard size.
- name: Creating the EC2 flavors
  shell: "{{ openstack }} flavor create --ram {{ item['memory'] }} --disk {{ item['disk'] }} --vcpus {{ item['vcpu'] }} {{ item['name'] }} --format value -c id"
  with_items: "{{ ec2_flavors }}"
  # Some OpenStack environments do not allow users to create public flavors.
  ignore_errors: true
  when: openstack_create_flavors | default(True) | bool

# Create PCI flavors so create server can specify a pci passthrough size.
- name: Creating the PCI passthrough flavors
  shell: "{{ openstack }} flavor create --ram {{ item['memory'] }} --disk {{ item['disk'] }} --vcpus {{ item['vcpu'] }} --property {{ pci_passthrough_property }} {{ item['name'] }}-pci --format value -c id"
  with_items: "{{ ec2_flavors }}"
  # Some OpenStack environments do not allow users to create public flavors.
  ignore_errors: true
  when: openstack_create_flavors | default(True) | bool

# Get the OpenStack project name.
- name: Getting the OpenStack project name
  shell: "source {{ openstack_rc }}; echo -n $OS_PROJECT_NAME"
  register: project_name
  when: openstack_project == ""

# Set the OpenStack project varaible.
- name: Setting the OpenStack project variable
  set_fact:
    openstack_project: "{{ project_name.stdout }}"
  when: openstack_project == "" and project_name.stdout != ""

# Change the quotas from the defaults for the project.
- name: Setting the quotas for {{ openstack_project }}
  shell: "{{ openstack }} quota set --{{ item }} {{ quotas[ item ] }} {{ openstack_project }}"
  with_items: "{{ quotas }}"
  # Only set quotas when the project is defined.
  when: openstack_project != ""

# Create a VM instance with the flavor, image, group, keypair and network.
- name: Creating a server instance {{ openstack_server_name }}
  shell: "{{ openstack }} server create --wait --flavor {{ openstack_server_flavor }} --image {{ openstack_server_image }} --security-group {{ security_group_uuid['stdout'] }} --key-name {{ openstack_keypair_name }} {{ openstack_server_name }} --nic net-id={{ ci_network_uuid['stdout'] }} --format value -c id"
  register: instance_uuid

# Add the floating ip address to the server.
- name: Adding the floating ip address {{ floating_ip_address }} to the server instance
  # This command can fail with: Instance network is not ready yet (HTTP 400)
  shell: "{{ openstack }} server add floating ip {{ openstack_server_name }} {{ floating_ip_address }}"
  register: add_result
  until: add_result['rc'] == 0
  # Retry 5 times until success.
  retries: 5
  delay: 5

# In some cases the "floating ip" is only accessible from the openstack-server.
- name: Creating an ssh command that will use {{ inventory_hostname }} as a proxy
  set_fact:
    # The key path must be from the remote host not the openstack-server.
    proxy_command: "ssh -i {{ ansible_private_key_file }} -W %h:%p {{ ansible_user }}@{{ inventory_hostname }}"

# Add the new host to the in-memory inventory.
- name: Adding the newly generated floating IP address to the inventory
  add_host:
    name: "{{ floating_ip_address }}"
    groups: [ 'target-server' ]
    ansible_user: cloud-user
    # Adding a ProxyCommand allows servers to contact this IP using the openstack-server.
    ansible_ssh_common_args: "-o ProxyCommand='{{ proxy_command }}'"
    # Adding the DNS nameserver list that was pulled from an OpenStack subnet command.
    public_dns_nameservers: "{{ dns_nameservers['stdout'] }}"

# Add the floating ip address to the /etc/hosts file.
- name: Adding the floating ip address to the hosts file
  lineinfile:
    backup: yes
    dest: /etc/hosts
    regexp: ".*{{ openstack_server_name }}$"
    line: "{{ floating_ip_address }} {{ openstack_server_name }}"
  become: true

# Use the wait_for module to wait until ssh access can be established.
- name: Waiting for the server {{ openstack_server_name }} to start
  wait_for:
    host: "{{ floating_ip_address }}"
    port: 22
    state: started
    delay: 5
    timeout: 300
